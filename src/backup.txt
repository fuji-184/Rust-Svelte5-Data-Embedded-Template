use std::fs::{self, OpenOptions};
use std::io::{self, Write};
use std::error::Error;
use axum::{
    response::{Html, IntoResponse, Response},
    Json,
    http::header::HeaderMap,
    Router,
    routing::get,
};

pub async fn generate_svelte_template(headers: &str, data: &str) {
        if headers == "navigate" {
            let file_path = "./src/svelte/build/index.html";
            let mut html_content = fs::read_to_string(file_path).expect("file gagal dibaca");

            let script_start = html_content.find("<script>");

            if let Some(body_pos) = script_start {
                let embed_str = format!(r#"let data2 = "{}";"#, data);

                if let Some(data2_pos) = html_content.find("let data2 =") {
                    let end_pos = html_content[data2_pos..].find(';').unwrap() + data2_pos + 1;
                    html_content.replace_range(data2_pos..end_pos, &embed_str);
                } else {
                    html_content.insert_str(body_pos + 8, &embed_str);
                }

                let mut file = OpenOptions::new()
                    .write(true)
                    .truncate(true)
                    .open(file_path)
                    .expect("gagal membuka file");
                    
                file.write_all(html_content.as_bytes()).expect("gagal menulis");
            }
        }
}